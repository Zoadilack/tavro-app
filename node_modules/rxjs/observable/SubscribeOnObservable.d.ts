import { Action } from '../scheduler/Action';
import { Scheduler } from '../Scheduler';
import { Subscriber } from '../Subscriber';
import { Subscription } from '../Subscription';
import { Observable } from '../Observable';
export interface DispatchArg<T> {
    source: Observable<T>;
    subscriber: Subscriber<T>;
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
export declare class SubscribeOnObservable<T> extends Observable<T> {
    source: Observable<T>;
    private delayTime;
    private scheduler;
    static create<T>(source: Observable<T>, delay?: number, scheduler?: Scheduler): Observable<T>;
<<<<<<< HEAD
    static dispatch<T>(arg: DispatchArg<T>): Subscription;
=======
    static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription;
>>>>>>> 860892b0c03877c0db2bc6f86fa17f159f2b3bf2
    constructor(source: Observable<T>, delayTime?: number, scheduler?: Scheduler);
    protected _subscribe(subscriber: Subscriber<T>): Subscription;
}
